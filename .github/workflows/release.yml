name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: cloudhost-linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: cloudhost-windows
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Build CloudHost (TUI)
      run: |
        cargo build --release --target ${{ matrix.target }} --bin cloudhost-tui --verbose
      env:
        CARGO_TERM_COLOR: always
        RUST_BACKTRACE: 1
    
    - name: Sign Windows executable
      if: matrix.os == 'windows-latest'
      run: |
        Write-Host "Creating self-signed certificate for code signing..."
        
        # Create self-signed certificate
        $cert = New-SelfSignedCertificate `
          -Type CodeSigningCert `
          -Subject "CN=CloudHost, O=Stepan Zagray, C=US" `
          -KeyUsage DigitalSignature `
          -FriendlyName "CloudHost Code Signing Certificate" `
          -CertStoreLocation "Cert:\CurrentUser\My" `
          -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.3", "2.5.29.19={text}") `
          -NotAfter (Get-Date).AddYears(1)
        
        Write-Host "Certificate created with thumbprint: $($cert.Thumbprint)"
        
        # Export certificate to PFX
        $securePassword = ConvertTo-SecureString -String "CloudHost2024!" -Force -AsPlainText
        Export-PfxCertificate -Cert $cert -FilePath "cloudhost-cert.pfx" -Password $securePassword
        
        Write-Host "Signing executable with self-signed certificate..."
        
        # Sign the executable with timestamp
        signtool sign /f cloudhost-cert.pfx /p "CloudHost2024!" /t http://timestamp.digicert.com /d "CloudHost - Personal Cloud Storage Server" /du "https://github.com/StepanZagray/CloudHost" target/${{ matrix.target }}/release/cloudhost-tui.exe
        
        Write-Host "Verifying signature..."
        
        # Verify signature
        signtool verify /pa target/${{ matrix.target }}/release/cloudhost-tui.exe
        
        Write-Host "âœ… Executable signed successfully!"
    
    - name: Create release artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p release
        cp target/${{ matrix.target }}/release/cloudhost-tui release/cloudhost-tui
    
    - name: Create release artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir release
        copy target\${{ matrix.target }}\release\cloudhost-tui.exe release\cloudhost-tui.exe
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: release/

  release:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: List artifacts
      run: |
        find artifacts -type f -exec ls -la {} \;
    
    - name: Generate checksums
      run: |
        cd artifacts/cloudhost-linux
        sha256sum cloudhost-tui > cloudhost-tui.sha256
        cd ../cloudhost-windows
        sha256sum cloudhost-tui.exe > cloudhost-tui.exe.sha256
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/cloudhost-linux/cloudhost-tui
          artifacts/cloudhost-linux/cloudhost-tui.sha256
          artifacts/cloudhost-windows/cloudhost-tui.exe
          artifacts/cloudhost-windows/cloudhost-tui.exe.sha256
        generate_release_notes: true
        draft: false
        prerelease: false
        body: |
          ## Code Signing
          
          The Windows executable is signed with a self-signed certificate to reduce false positive antivirus warnings.
          
          ## Windows Defender Warning
          
          If Windows Defender still shows a warning:
          1. Click "More info" 
          2. Click "Run anyway"
          3. Or add an exception in Windows Security
          
          This is a false positive. The source code is available for inspection.
          
          ## Verification
          
          Verify the executable with the provided SHA256 checksums:
          ```bash
          # Linux
          sha256sum -c cloudhost-tui.sha256
          
          # Windows (PowerShell)
          Get-FileHash cloudhost-tui.exe -Algorithm SHA256
          ```
          
          ## Signature Verification (Windows)
          
          To verify the code signature:
          ```powershell
          Get-AuthenticodeSignature cloudhost-tui.exe
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
